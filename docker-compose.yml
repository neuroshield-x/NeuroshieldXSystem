services:
  # -------------------- Gateway (NGINX) --------------------
  gateway:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      alert-api:
        condition: service_healthy
      anomaly-detector:
        condition: service_healthy
      explanation-ai:
        condition: service_healthy
      log-ingestor:
        condition: service_healthy
      frontend:
        condition: service_started

  # -------------------- Backend APIs -----------------------
  alert-api:
    build:
      context: ./services/alert-api
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:neuro@db:5432/alerts_db
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8001/health || curl -sf http://localhost:8001/health"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 10s

  anomaly-detector:
    build:
      context: ./services/anomaly-detector
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - KAFKA_BROKER=kafka:9092
      - PYTHONUNBUFFERED=1
    depends_on:
      kafka:
        condition: service_started   # ✅ simplified, no “unhealthy” blocking
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8002/health || curl -sf http://localhost:8002/health"]
      interval: 15s
      timeout: 4s
      retries: 10
      start_period: 15s

  explanation-ai:
    build:
      context: ./services/explanation-ai
    restart: unless-stopped
    ports:
      - "8003:8003"
    env_file:
      - .env         # expects GROQ_API_KEY (+ optional GROQ_MODEL)
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8003/health || curl -sf http://localhost:8003/health"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 10s

  # -------------------- Log pipeline -----------------------
  log-ingestor:
    build:
      context: ./services/log-ingestor
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - KAFKA_BROKER=kafka:9092
      - PYTHONUNBUFFERED=1
    depends_on:
      kafka:
        condition: service_started   # ✅ simplified
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8004/api/ingest/health || curl -sf http://localhost:8004/api/ingest/health"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 10s

  log-fetcher:
    build:
      context: ./services/log-fetcher
    restart: unless-stopped
    depends_on:
      log-ingestor:
        condition: service_healthy
    environment:
      - INGEST_URL=http://log-ingestor:8004/api/ingest/
      - FETCH_INTERVAL=5   # shorter for demo
      - PYTHONUNBUFFERED=1

  # -------------------- Frontend ---------------------------
  frontend:
    build:
      context: ./frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ || curl -sf http://localhost:3000/"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 15s

  # -------------------- Kafka & DB -------------------------
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: kafka-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    # ✅ removed healthcheck using `nc` (not present in the image)

  kafka:
    image: bitnami/kafka:3.4.0
    container_name: kafka-broker
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    # ✅ removed Kafka healthcheck too (optional, avoids blocking)

  db:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: neuro
      POSTGRES_DB: alerts_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d alerts_db"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s

volumes:
  pgdata: